import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from "/components/ui/card"
import { Label } from "/components/ui/label"
import { Input } from "/components/ui/input"
import { Slider } from "/components/ui/slider"
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts'

export default function SIPCalculator() {
  const [monthlyInvestment, setMonthlyInvestment] = useState<number>(5000)
  const [investmentPeriod, setInvestmentPeriod] = useState<number>(5)
  const [expectedReturn, setExpectedReturn] = useState<number>(12)
  const [results, setResults] = useState({
    totalInvestment: 0,
    estimatedReturns: 0,
    totalValue: 0
  })
  const [chartData, setChartData] = useState<any[]>([])

  useEffect(() => {
    calculateSIP()
  }, [monthlyInvestment, investmentPeriod, expectedReturn])

  const calculateSIP = () => {
    const months = investmentPeriod * 12
    const monthlyRate = expectedReturn / 12 / 100
    let futureValue = 0

    // Calculate future value using SIP formula
    futureValue = monthlyInvestment * ((Math.pow(1 + monthlyRate, months) - 1) / monthlyRate) * (1 + monthlyRate)

    const totalInvestment = monthlyInvestment * months
    const estimatedReturns = futureValue - totalInvestment

    setResults({
      totalInvestment,
      estimatedReturns,
      totalValue: futureValue
    })

    // Generate data for chart
    const data = []
    let runningTotal = 0
    for (let year = 1; year <= investmentPeriod; year++) {
      const yearInvestment = monthlyInvestment * 12
      const yearValue = monthlyInvestment * ((Math.pow(1 + monthlyRate, year * 12) - 1) / monthlyRate) * (1 + monthlyRate)
      const yearReturns = yearValue - (yearInvestment * year)
      
      data.push({
        year,
        investment: yearInvestment * year,
        returns: yearReturns,
        total: yearValue
      })
    }
    setChartData(data)
  }

  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
      maximumFractionDigits: 0
    }).format(value)
  }

  return (
    <div className="max-w-4xl mx-auto p-4">
      <Card>
        <CardHeader>
          <CardTitle className="text-2xl font-bold">SIP Calculator</CardTitle>
          <p className="text-sm text-gray-500">
            Calculate returns on your monthly Systematic Investment Plan (SIP)
          </p>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="space-y-2">
              <Label htmlFor="monthly-investment">Monthly Investment (â‚¹)</Label>
              <Input
                id="monthly-investment"
                type="number"
                value={monthlyInvestment}
                onChange={(e) => setMonthlyInvestment(Number(e.target.value))}
                min="500"
                step="500"
              />
              <Slider
                defaultValue={[5000]}
                max={100000}
                step={500}
                min={500}
                value={[monthlyInvestment]}
                onValueChange={(value) => setMonthlyInvestment(value[0])}
                className="mt-2"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="investment-period">Investment Period (Years)</Label>
              <Input
                id="investment-period"
                type="number"
                value={investmentPeriod}
                onChange={(e) => setInvestmentPeriod(Number(e.target.value))}
                min="1"
                max="30"
              />
              <Slider
                defaultValue={[5]}
                max={30}
                step={1}
                min={1}
                value={[investmentPeriod]}
                onValueChange={(value) => setInvestmentPeriod(value[0])}
                className="mt-2"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="expected-return">Expected Return Rate (% p.a.)</Label>
              <Input
                id="expected-return"
                type="number"
                value={expectedReturn}
                onChange={(e) => setExpectedReturn(Number(e.target.value))}
                min="1"
                max="30"
                step="0.1"
              />
              <Slider
                defaultValue={[12]}
                max={30}
                step={0.1}
                min={1}
                value={[expectedReturn]}
                onValueChange={(value) => setExpectedReturn(value[0])}
                className="mt-2"
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
            <div className="bg-blue-50 p-4 rounded-lg">
              <p className="text-sm text-blue-600">Total Investment</p>
              <p className="text-2xl font-bold">{formatCurrency(results.totalInvestment)}</p>
            </div>
            <div className="bg-green-50 p-4 rounded-lg">
              <p className="text-sm text-green-600">Estimated Returns</p>
              <p className="text-2xl font-bold">{formatCurrency(results.estimatedReturns)}</p>
            </div>
            <div className="bg-purple-50 p-4 rounded-lg">
              <p className="text-sm text-purple-600">Total Value</p>
              <p className="text-2xl font-bold">{formatCurrency(results.totalValue)}</p>
            </div>
          </div>

          <div className="mt-8 h-64">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={chartData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="year" />
                <YAxis />
                <Tooltip 
                  formatter={(value) => formatCurrency(Number(value))}
                  labelFormatter={(year) => `Year ${year}`}
                />
                <Legend />
                <Line type="monotone" dataKey="investment" stroke="#3b82f6" name="Invested" />
                <Line type="monotone" dataKey="returns" stroke="#10b981" name="Returns" />
              </LineChart>
            </ResponsiveContainer>
          </div>

          <div className="mt-4 text-sm text-gray-500">
            <p>Note: This calculator provides an estimate based on the inputs provided. Actual returns may vary depending on market conditions.</p>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
